{
  "hash": "86970032130a0ab33b9fdc023ac371d7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Learning to optimize with CVXPY\nauthor: rafa sacaan\ndate: '2024-05-24'\ncategories:\n  - optimization\n  - tutorial\ndraft: true\npage-navigation: true\n---\n\nLet´s learn about `cvxpy`. Inspired from [calmcode.io](https://calmcode.io/course/cvxpy-one/the-stigler-diet).\n\nWe will check a basic linear problem and then move on to a quadratic problem.\n\n\n# I. Learning the basics\n\nFirst of all, as its name says, remember that `cvxpy` can only solve convex problems! This means, your set of constraint should be convex and your objective function should be also convex.\n\nLet´s download the Stigler Diet dataset. For each type of food, it has its weight, price and composition. We want to create a meal at minimal cost that maximizes nutrients.\n\n::: {#d6544548 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"stigler.csv\")\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>commodity</th>\n      <th>unit</th>\n      <th>price_cents</th>\n      <th>calories</th>\n      <th>protein_g</th>\n      <th>calcium_g</th>\n      <th>iron_mg</th>\n      <th>vitamin_a_iu</th>\n      <th>vitamin_b1_mg</th>\n      <th>vitamin_b2_mg</th>\n      <th>niacin_mg</th>\n      <th>vitamin_c_mg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Wheat Flour (Enriched)</td>\n      <td>10 lb.</td>\n      <td>36.0</td>\n      <td>44.7</td>\n      <td>1411</td>\n      <td>2.0</td>\n      <td>365</td>\n      <td>0.0</td>\n      <td>55.4</td>\n      <td>33.3</td>\n      <td>441</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Macaroni</td>\n      <td>1 lb.</td>\n      <td>14.1</td>\n      <td>11.6</td>\n      <td>418</td>\n      <td>0.7</td>\n      <td>54</td>\n      <td>0.0</td>\n      <td>3.2</td>\n      <td>1.9</td>\n      <td>68</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Wheat Cereal (Enriched)</td>\n      <td>28 oz.</td>\n      <td>24.2</td>\n      <td>11.8</td>\n      <td>377</td>\n      <td>14.4</td>\n      <td>175</td>\n      <td>0.0</td>\n      <td>14.4</td>\n      <td>8.8</td>\n      <td>114</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n<br>\nAnd let´s also check how many different types of food there are.\n\n::: {#48e424db .cell execution_count=2}\n``` {.python .cell-code}\nprint(f\"There are {df.shape[0]} foods.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 77 foods.\n```\n:::\n:::\n\n\nNow let´s import cvpxy. We need to create an **objective function** and **constraints**.\n\n::: {#ba0cdf6c .cell execution_count=3}\n``` {.python .cell-code}\nimport cvxpy as cp\n\n# Variable: create 'x' == amount of each food\nprice = df['price_cents'].values\nx = cp.Variable(price.shape[0])\n\n# Create constraints over 'x'\nconstraints = [\n    x >= 0,\n    cp.sum(df['vitamin_c_mg'].values @ x) >= 75,\n    cp.sum(df['iron_mg'].values @ x) >= 12,\n    cp.sum(df['vitamin_b1_mg'].values @ x) >= 1.8,\n    cp.sum(df['vitamin_b2_mg'].values @ x) >= 2.7,\n]\n\n# Objective\nobj = cp.Minimize(cp.sum(price @ x))\n\n# Create a problem and pass the objective and constraints\nprob = cp.Problem(obj, constraints)\n```\n:::\n\n\nWe can solve the problem and find the minimum cost:\n\n::: {#3b617060 .cell execution_count=4}\n``` {.python .cell-code}\nprob.solve()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0.6660975987945398\n```\n:::\n:::\n\n\nand the amount of food or `x` values.\n\n::: {#5cd7fef6 .cell execution_count=5}\n``` {.python .cell-code}\nx.value\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([ 3.33999268e-12,  2.84500893e-12,  2.99646842e-12,  1.63925147e-11,\n        5.04560385e-11,  1.33170801e-11,  1.53496096e-11,  2.79791026e-11,\n        2.12562011e-11,  1.58968798e-11,  1.24911903e-11, -6.29738669e-12,\n        1.39243299e-12,  1.64694969e-11,  1.17585993e-10, -1.94860352e-11,\n       -9.82498151e-12, -4.89867505e-12, -6.37973263e-12, -2.97146075e-12,\n       -1.87104957e-13, -8.73557379e-12, -2.44191219e-11, -1.43884064e-11,\n       -8.53664788e-12, -8.53256245e-12, -7.01977142e-12, -2.98749345e-12,\n        2.88886508e-12,  8.74726114e-12, -9.06636962e-12, -1.19690855e-11,\n       -3.36771124e-12, -1.26220720e-12, -8.00726071e-12, -6.44521659e-12,\n       -3.07383982e-12, -6.44311146e-12, -1.07600620e-11,  3.54726515e-12,\n        4.60649855e-11,  3.08274691e-11,  4.74211766e-12,  4.84132773e-12,\n        3.00892728e-11,  1.39690820e-02,  4.74057459e-11,  2.08206915e-11,\n        2.03718725e-11,  1.13126317e-10,  4.71264378e-12,  5.26867814e-11,\n        5.91305746e-11,  4.26966601e-12, -1.60662959e-12,  4.18211423e-12,\n        9.38621075e-13,  1.57645081e-11,  2.55192714e-11,  1.20430768e-11,\n        8.94346474e-12,  2.15907502e-11,  2.38848987e-11,  7.18030202e-12,\n        1.72112741e-11,  1.38438447e-11,  4.25184487e-11,  6.90350543e-02,\n        2.00228821e-09, -1.39627031e-11, -1.64511451e-11,  2.01659075e-11,\n       -5.86910233e-13, -3.00679997e-11,  4.53295442e-12,  1.09870553e-11,\n       -1.15101364e-11])\n```\n:::\n:::\n\n\nLet´s assign these values to the original dataframe in order to map back our solution to each of the foods.\n\n::: {#3e94b920 .cell execution_count=6}\n``` {.python .cell-code}\n(\n    df\n    .assign(amount=x.value)\n    .sort_values('amount', ascending=False)\n    .head(5)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>commodity</th>\n      <th>unit</th>\n      <th>price_cents</th>\n      <th>calories</th>\n      <th>protein_g</th>\n      <th>calcium_g</th>\n      <th>iron_mg</th>\n      <th>vitamin_a_iu</th>\n      <th>vitamin_b1_mg</th>\n      <th>vitamin_b2_mg</th>\n      <th>niacin_mg</th>\n      <th>vitamin_c_mg</th>\n      <th>amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>67</th>\n      <td>Lima Beans, Dried</td>\n      <td>1 lb.</td>\n      <td>8.9</td>\n      <td>17.4</td>\n      <td>1055</td>\n      <td>3.7</td>\n      <td>459</td>\n      <td>5.1</td>\n      <td>26.9</td>\n      <td>38.2</td>\n      <td>93</td>\n      <td>0</td>\n      <td>6.903505e-02</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Cabbage</td>\n      <td>1 lb.</td>\n      <td>3.7</td>\n      <td>2.6</td>\n      <td>125</td>\n      <td>4.0</td>\n      <td>36</td>\n      <td>7.2</td>\n      <td>9.0</td>\n      <td>4.5</td>\n      <td>26</td>\n      <td>5369</td>\n      <td>1.396908e-02</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>Navy Beans, Dried</td>\n      <td>1 lb.</td>\n      <td>5.9</td>\n      <td>26.9</td>\n      <td>1691</td>\n      <td>11.4</td>\n      <td>792</td>\n      <td>0.0</td>\n      <td>38.4</td>\n      <td>24.6</td>\n      <td>217</td>\n      <td>0</td>\n      <td>2.002288e-09</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Evaporated Milk (can)</td>\n      <td>14.5 oz.</td>\n      <td>6.7</td>\n      <td>8.4</td>\n      <td>422</td>\n      <td>15.1</td>\n      <td>9</td>\n      <td>26.0</td>\n      <td>3.0</td>\n      <td>23.5</td>\n      <td>11</td>\n      <td>60</td>\n      <td>1.175860e-10</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Onions</td>\n      <td>1 lb.</td>\n      <td>3.6</td>\n      <td>5.8</td>\n      <td>166</td>\n      <td>3.8</td>\n      <td>59</td>\n      <td>16.6</td>\n      <td>4.7</td>\n      <td>5.9</td>\n      <td>21</td>\n      <td>1184</td>\n      <td>1.131263e-10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Re-writing our constraints\n\nWe can be less literal about our constraints and generalize the code.\n\n::: {#0abe76b6 .cell execution_count=7}\n``` {.python .cell-code}\nconstraint_dict = {\n    'iron_mg': 12,\n    'vitamin_b1_mg': 1.8, \n    'vitamin_b2_mg': 2.7,\n    'vitamin_c_mg': 75\n}\n\nconstraints = [x >= 0]\n\nfor key, value in constraint_dict.items():\n    constraints.append(x @ df[key] >= value)\n```\n:::\n\n\n# II. Quadratic optimization\n\nLet´s load our data and express prices as returns by calculating the percent change.\n\n::: {#c211c9d2 .cell execution_count=8}\n``` {.python .cell-code}\ndf = pd.read_csv(\"stocks.csv\")\ndf_returns = (\n    df\n    .set_index('Date')\n    .diff()\n)\n\ndf_returns.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n      <th>KLM</th>\n      <th>ING</th>\n      <th>MOS</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000-01-20</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2000-01-21</th>\n      <td>-0.02</td>\n      <td>0.0</td>\n      <td>-0.14</td>\n      <td>-0.30</td>\n    </tr>\n    <tr>\n      <th>2000-01-24</th>\n      <td>-1.03</td>\n      <td>0.0</td>\n      <td>-0.36</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>2000-01-25</th>\n      <td>-0.90</td>\n      <td>0.0</td>\n      <td>-0.34</td>\n      <td>-0.34</td>\n    </tr>\n    <tr>\n      <th>2000-01-26</th>\n      <td>0.46</td>\n      <td>0.0</td>\n      <td>0.11</td>\n      <td>0.14</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b629516a .cell execution_count=9}\n``` {.python .cell-code}\ndf_returns.describe().T[[\"mean\",\"std\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n      <th>std</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>MSFT</th>\n      <td>0.011315</td>\n      <td>0.481915</td>\n    </tr>\n    <tr>\n      <th>KLM</th>\n      <td>-0.000080</td>\n      <td>0.016220</td>\n    </tr>\n    <tr>\n      <th>ING</th>\n      <td>0.000589</td>\n      <td>0.359576</td>\n    </tr>\n    <tr>\n      <th>MOS</th>\n      <td>0.002692</td>\n      <td>1.315388</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe need to build the following objective function:\n$$\\text{max} \\mu^{T}x - px^{T}Cx$$\n\nwhere the objective is to maximize expected returns and penalize on the covariance of the stocks, meaning, that we want a diverse or orthogonal portfolio to avoid risks (muliplied by a penalization factor).\n\n::: {#3992247a .cell execution_count=10}\n``` {.python .cell-code}\n# Define values we will need: \n# means and covariances \nmean_stock = df_returns.mean().values\ncov_stock = df_returns.cov().values\n\n# Variable\nx = cp.Variable(len(mean_stock))\nstock_return = mean_stock @ x\nstock_risk = cp.quad_form(x, cov_stock)\np = .1\n\n# Objective\nobj = cp.Maximize(stock_return - p * stock_risk)\nconstraints = [\n    x >= 0,\n    cp.sum(x) == 1\n]\n\n# Solve\nprob = cp.Problem(objective=obj, constraints=constraints)\nprob.solve(), x.value\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(0.001307757942769349,\n array([ 2.46438620e-01,  7.53561380e-01,  2.34169556e-23, -2.72636972e-24]))\n```\n:::\n:::\n\n\nNow, let´s check the expected returns conditional on the `p` parameter, which represents our risk aversion.\n\n::: {#96cd8614 .cell execution_count=11}\n``` {.python .cell-code}\ndef solve_problem(dataf, risk_pref=0.1):\n    mean_stock = dataf.diff().mean().values\n    cov_stock = dataf.diff().cov().values\n\n    x = cp.Variable(len(mean_stock))\n\n    stock_return = mean_stock.T @ x\n    stock_risk = cp.quad_form(x, cov_stock)\n\n    objective = cp.Maximize(stock_return - risk_pref * stock_risk)\n    constraints = [cp.sum(x) == 1, x >= 0]\n    prob = cp.Problem(objective=objective, constraints=constraints)\n    return prob.solve(), x.value\n\nimport numpy as np\nimport matplotlib.pylab as plt\n\nsteps = np.linspace(0.01, 2, 100)\nx_vals = np.zeros((steps.shape[0], 4))\nprofit = np.zeros(steps.shape[0])\nfor i, r in enumerate(steps):\n    p, xs = solve_problem(df.set_index('Date'), risk_pref=r)\n    x_vals[i, :] = xs\n    profit[i] = p\n```\n:::\n\n\n::: {#0948714f .cell execution_count=12}\n``` {.python .cell-code}\nfig, ax = plt.subplots(2,1,sharex=True, figsize=(12,8))\nax[0].plot(steps, profit)\nax[0].set_ylabel(\"1 day ahead \\nexpected return\");\n\n\ntickers = [\"MSFT\", \"KLM\", \"ING\", \"MOS\"]\nfor idx, stock in enumerate(tickers):\n    ax[1].plot(steps, x_vals[:, idx], label=stock)\nax[1].set_xlabel(\"risk avoidance (p)\")\nax[1].set_ylabel(\"proportion \\nof investment\")\nax[1].legend();\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=993 height=651}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}