---
title: "Learning to optimize with CVXPY"
author: "rafa sacaan"
date: "2024-05-24"
categories: [optimization, tutorial]
draft: true
page-navigation: true
jupyter: ml
---

Let´s learn about `cvxpy`. Inspired from [calmcode.io](https://calmcode.io/course/cvxpy-one/the-stigler-diet).

We will check a basic linear problem and then move on to a quadratic problem.


# I. Learning the basics

First of all, as its name says, remember that `cvxpy` can only solve convex problems! This means, your set of constraint should be convex and your objective function should be also convex.

Let´s download the Stigler Diet dataset. For each type of food, it has its weight, price and composition. We want to create a meal at minimal cost that maximizes nutrients.


```{python}
import pandas as pd
import numpy as np

df = pd.read_csv("stigler.csv")
df.head(3)
```
<br>
<br>
And let´s also check how many different types of food there are.
```{python}
print(f"There are {df.shape[0]} foods.")
```
Now let´s import cvpxy. We need to create an **objective function** and **constraints**.

```{python}
import cvxpy as cp

# Variable: create 'x' == amount of each food
price = df['price_cents'].values
x = cp.Variable(price.shape[0])

# Create constraints over 'x'
constraints = [
    x >= 0,
    cp.sum(df['vitamin_c_mg'].values @ x) >= 75,
    cp.sum(df['iron_mg'].values @ x) >= 12,
    cp.sum(df['vitamin_b1_mg'].values @ x) >= 1.8,
    cp.sum(df['vitamin_b2_mg'].values @ x) >= 2.7,
]

# Objective
obj = cp.Minimize(cp.sum(price @ x))

# Create a problem and pass the objective and constraints
prob = cp.Problem(obj, constraints)
```

We can solve the problem and find the minimum cost:
```{python}
prob.solve()
```

and the amount of food or `x` values.
```{python}
x.value
```

Let´s assign these values to the original dataframe in order to map back our solution to each of the foods.
```{python}
(
    df
    .assign(amount=x.value)
    .sort_values('amount', ascending=False)
    .head(5)
)
```

### Re-writing our constraints

We can be less literal about our constraints and generalize the code.
```{python}
constraint_dict = {
    'iron_mg': 12,
    'vitamin_b1_mg': 1.8, 
    'vitamin_b2_mg': 2.7,
    'vitamin_c_mg': 75
}

constraints = [x >= 0]

for key, value in constraint_dict.items():
    constraints.append(x @ df[key] >= value)
```

# II. Quadratic optimization

Let´s load our data and express prices as returns by calculating the percent change.
```{python}
df = pd.read_csv("stocks.csv")
df_returns = (
    df
    .set_index('Date')
    .diff()
)

df_returns.head(5)
```

```{python}
df_returns.describe().T[["mean","std"]]
```

We need to build the following objective function:
$$\text{max} \mu^{T}x - px^{T}Cx$$

where the objective is to maximize expected returns and penalize on the covariance of the stocks, meaning, that we want a diverse or orthogonal portfolio to avoid risks (muliplied by a penalization factor).
```{python}
# Define values we will need: 
# means and covariances 
mean_stock = df_returns.mean().values
cov_stock = df_returns.cov().values

# Variable
x = cp.Variable(len(mean_stock))
stock_return = mean_stock @ x
stock_risk = cp.quad_form(x, cov_stock)
p = .1

# Objective
obj = cp.Maximize(stock_return - p * stock_risk)
constraints = [
    x >= 0,
    cp.sum(x) == 1
]

# Solve
prob = cp.Problem(objective=obj, constraints=constraints)
prob.solve(), x.value
```

Now, let´s check the expected returns conditional on the `p` parameter, which represents our risk aversion.

```{python}
def solve_problem(dataf, risk_pref=0.1):
    mean_stock = dataf.diff().mean().values
    cov_stock = dataf.diff().cov().values

    x = cp.Variable(len(mean_stock))

    stock_return = mean_stock.T @ x
    stock_risk = cp.quad_form(x, cov_stock)

    objective = cp.Maximize(stock_return - risk_pref * stock_risk)
    constraints = [cp.sum(x) == 1, x >= 0]
    prob = cp.Problem(objective=objective, constraints=constraints)
    return prob.solve(), x.value

import numpy as np
import matplotlib.pylab as plt

steps = np.linspace(0.01, 2, 100)
x_vals = np.zeros((steps.shape[0], 4))
profit = np.zeros(steps.shape[0])
for i, r in enumerate(steps):
    p, xs = solve_problem(df.set_index('Date'), risk_pref=r)
    x_vals[i, :] = xs
    profit[i] = p
```

```{python}
fig, ax = plt.subplots(2,1,sharex=True, figsize=(12,8))
ax[0].plot(steps, profit)
ax[0].set_ylabel("1 day ahead \nexpected return");


tickers = ["MSFT", "KLM", "ING", "MOS"]
for idx, stock in enumerate(tickers):
    ax[1].plot(steps, x_vals[:, idx], label=stock)
ax[1].set_xlabel("risk avoidance (p)")
ax[1].set_ylabel("proportion \nof investment")
ax[1].legend();
```